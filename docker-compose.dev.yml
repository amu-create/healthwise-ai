version: '3.8'

services:
  # PostgreSQL 데이터베이스
  db:
    image: postgres:14-alpine
    container_name: healthwise_db
    environment:
      POSTGRES_DB: healthwise_dev
      POSTGRES_USER: developer
      POSTGRES_PASSWORD: devpass123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U developer -d healthwise_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 캐시 및 채널 레이어
  redis:
    image: redis:6-alpine
    container_name: healthwise_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django 백엔드
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: healthwise_backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
      - media_volume:/app/media
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://developer:devpass123@db:5432/healthwise_dev
      - REDIS_URL=redis://redis:6379/1
    env_file:
      - ./backend/.env
    stdin_open: true
    tty: true

  # React 프론트엔드
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: healthwise_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - CHOKIDAR_USEPOLLING=true
    env_file:
      - ./frontend/.env
    depends_on:
      - backend
    stdin_open: true
    tty: true

  # Nginx (선택사항 - 프로덕션 유사 환경)
  nginx:
    image: nginx:alpine
    container_name: healthwise_nginx
    volumes:
      - ./docker/nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/static
      - media_volume:/media
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
